/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any styles
 * defined in the other CSS/SCSS files in this directory. It is generally better to create a new
 * file per style scope.
 *
 *= require application-import
 *= require_self
 *
 */



 $font-family     : "raleway-regular", "Helvetica Neue", Arial, sans-serif;
 $font-size : 16px;
 $font-color: #222;
 $selection-bg    : #00f;
 $selection-color : #fff;


// Selection
::-moz-selection {
	text-shadow: none;
	color: $selection-color;
	background: $selection-bg;
}

::selection {
	text-shadow: none;
	color: $selection-color;
	background: $selection-bg;
}

// RÃ©glages globaux
*,
*:after,
*:before {
	position: relative;
	box-sizing: border-box;
	outline: none;
}

html {
	font-size: $font-size;

	// Media queries
	@media (min-width: 980px) {
		font-size: $font-size + 1;
	}

	@media (min-width: 1200px) {
		font-size: $font-size + 2;
	}

	@media (min-width: 1440px) {
		font-size: $font-size + 3;
	}

	@media (min-width: 1920px) {
		font-size: $font-size + 4;
	}
}

body {
	font-family: $font-family;
	font-size: 1em;
	color: $font-color;
}

/*------------------------------------*\
		Easing
\*------------------------------------*/

$in-quad      : cubic-bezier(0.550, 0.085, 0.680, 0.530);
$out-quad     : cubic-bezier(0.250, 0.460, 0.450, 0.940);
$in-out-quad  :   cubic-bezier(0.455, 0.030, 0.515, 0.955);

$in-cubic     : cubic-bezier(0.550, 0.055, 0.675, 0.190);
$out-cubic    : cubic-bezier(0.215, 0.610, 0.355, 1.000);
$in-out-cubic :  cubic-bezier(0.645, 0.045, 0.355, 1.000);

$in-quart     : cubic-bezier(0.895, 0.030, 0.685, 0.220);
$out-quart    : cubic-bezier(0.165, 0.840, 0.440, 1.000);
$in-out-quart : cubic-bezier(0.770, 0.000, 0.175, 1.000);

$in-quint     : cubic-bezier(0.755, 0.050, 0.855, 0.060);
$out-quint    : cubic-bezier(0.230, 1.000, 0.320, 1.000);
$in-out-quint : cubic-bezier(0.860, 0.000, 0.070, 1.000);

$in-sine      : cubic-bezier(0.470, 0.000, 0.745, 0.715);
$out-sine     : cubic-bezier(0.390, 0.575, 0.565, 1.000);
$in-out-sine  : cubic-bezier(0.445, 0.050, 0.550, 0.950);

$in-expo      : cubic-bezier(0.950, 0.050, 0.795, 0.035);
$out-expo     : cubic-bezier(0.190, 1.000, 0.220, 1.000);
$in-out-expo  : cubic-bezier(1.000, 0.000, 0.000, 1.000);

$in-circ      : cubic-bezier(0.600, 0.040, 0.980, 0.335);
$out-circ     : cubic-bezier(0.075, 0.820, 0.165, 1.000);
$in-out-circ  : cubic-bezier(0.785, 0.135, 0.150, 0.860);

$in-back      : cubic-bezier(0.600, -0.280, 0.735, 0.045);
$out-back     : cubic-bezier(0.175, 00.885, 0.320, 1.275);
$in-out-back  : cubic-bezier(0.680, -0.550, 0.265, 1.550);

$out-back-t   : cubic-bezier(0.535, 1.650, 0.635, 1.005);


@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	@include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}


@mixin transition($transition...) {
	-moz-transition:    $transition;
	-o-transition:      $transition;
	-webkit-transition: $transition;
	transition:         $transition;
}
@mixin transition-property($property...) {
	-moz-transition-property:    $property;
	-o-transition-property:      $property;
	-webkit-transition-property: $property;
	transition-property:         $property;
}
@mixin transition-duration($duration...) {
	-moz-transition-property:    $duration;
	-o-transition-property:      $duration;
	-webkit-transition-property: $duration;
	transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
	-moz-transition-timing-function:    $timing;
	-o-transition-timing-function:      $timing;
	-webkit-transition-timing-function: $timing;
	transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
	-moz-transition-delay:    $delay;
	-o-transition-delay:      $delay;
	-webkit-transition-delay: $delay;
	transition-delay:         $delay;
}
